// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	sync "sync"

	v1alpha1 "code.cloudfoundry.org/cf-operator/pkg/kube/apis/extendedjob/v1alpha1"
	extendedjob "code.cloudfoundry.org/cf-operator/pkg/kube/controllers/extendedjob"
	v1 "k8s.io/api/core/v1"
)

type FakeQuery struct {
	MatchStub        func(v1alpha1.ExtendedJob, v1.Pod) bool
	matchMutex       sync.RWMutex
	matchArgsForCall []struct {
		arg1 v1alpha1.ExtendedJob
		arg2 v1.Pod
	}
	matchReturns struct {
		result1 bool
	}
	matchReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeQuery) Match(arg1 v1alpha1.ExtendedJob, arg2 v1.Pod) bool {
	fake.matchMutex.Lock()
	ret, specificReturn := fake.matchReturnsOnCall[len(fake.matchArgsForCall)]
	fake.matchArgsForCall = append(fake.matchArgsForCall, struct {
		arg1 v1alpha1.ExtendedJob
		arg2 v1.Pod
	}{arg1, arg2})
	fake.recordInvocation("Match", []interface{}{arg1, arg2})
	fake.matchMutex.Unlock()
	if fake.MatchStub != nil {
		return fake.MatchStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.matchReturns
	return fakeReturns.result1
}

func (fake *FakeQuery) MatchCallCount() int {
	fake.matchMutex.RLock()
	defer fake.matchMutex.RUnlock()
	return len(fake.matchArgsForCall)
}

func (fake *FakeQuery) MatchCalls(stub func(v1alpha1.ExtendedJob, v1.Pod) bool) {
	fake.matchMutex.Lock()
	defer fake.matchMutex.Unlock()
	fake.MatchStub = stub
}

func (fake *FakeQuery) MatchArgsForCall(i int) (v1alpha1.ExtendedJob, v1.Pod) {
	fake.matchMutex.RLock()
	defer fake.matchMutex.RUnlock()
	argsForCall := fake.matchArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeQuery) MatchReturns(result1 bool) {
	fake.matchMutex.Lock()
	defer fake.matchMutex.Unlock()
	fake.MatchStub = nil
	fake.matchReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeQuery) MatchReturnsOnCall(i int, result1 bool) {
	fake.matchMutex.Lock()
	defer fake.matchMutex.Unlock()
	fake.MatchStub = nil
	if fake.matchReturnsOnCall == nil {
		fake.matchReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.matchReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeQuery) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.matchMutex.RLock()
	defer fake.matchMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeQuery) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ extendedjob.Query = new(FakeQuery)
