// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"code.cloudfoundry.org/cf-operator/pkg/kube/apis/extendedjob/v1alpha1"
	"code.cloudfoundry.org/cf-operator/pkg/kube/controllers/extendedjob"
	v1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/types"
)

type FakeQuery struct {
	IsJobAlreadyExistsStub        func(context.Context, v1alpha1.ExtendedJob, types.UID, *extendedjob.TriggerReconciler) (bool, error)
	isJobAlreadyExistsMutex       sync.RWMutex
	isJobAlreadyExistsArgsForCall []struct {
		arg1 context.Context
		arg2 v1alpha1.ExtendedJob
		arg3 types.UID
		arg4 *extendedjob.TriggerReconciler
	}
	isJobAlreadyExistsReturns struct {
		result1 bool
		result2 error
	}
	isJobAlreadyExistsReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	MatchStub        func(v1alpha1.ExtendedJob, v1.Pod) bool
	matchMutex       sync.RWMutex
	matchArgsForCall []struct {
		arg1 v1alpha1.ExtendedJob
		arg2 v1.Pod
	}
	matchReturns struct {
		result1 bool
	}
	matchReturnsOnCall map[int]struct {
		result1 bool
	}
	MatchStateStub        func(v1alpha1.ExtendedJob, v1alpha1.PodState) bool
	matchStateMutex       sync.RWMutex
	matchStateArgsForCall []struct {
		arg1 v1alpha1.ExtendedJob
		arg2 v1alpha1.PodState
	}
	matchStateReturns struct {
		result1 bool
	}
	matchStateReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeQuery) IsJobAlreadyExists(arg1 context.Context, arg2 v1alpha1.ExtendedJob, arg3 types.UID, arg4 *extendedjob.TriggerReconciler) (bool, error) {
	fake.isJobAlreadyExistsMutex.Lock()
	ret, specificReturn := fake.isJobAlreadyExistsReturnsOnCall[len(fake.isJobAlreadyExistsArgsForCall)]
	fake.isJobAlreadyExistsArgsForCall = append(fake.isJobAlreadyExistsArgsForCall, struct {
		arg1 context.Context
		arg2 v1alpha1.ExtendedJob
		arg3 types.UID
		arg4 *extendedjob.TriggerReconciler
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("IsJobAlreadyExists", []interface{}{arg1, arg2, arg3, arg4})
	fake.isJobAlreadyExistsMutex.Unlock()
	if fake.IsJobAlreadyExistsStub != nil {
		return fake.IsJobAlreadyExistsStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.isJobAlreadyExistsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeQuery) IsJobAlreadyExistsCallCount() int {
	fake.isJobAlreadyExistsMutex.RLock()
	defer fake.isJobAlreadyExistsMutex.RUnlock()
	return len(fake.isJobAlreadyExistsArgsForCall)
}

func (fake *FakeQuery) IsJobAlreadyExistsCalls(stub func(context.Context, v1alpha1.ExtendedJob, types.UID, *extendedjob.TriggerReconciler) (bool, error)) {
	fake.isJobAlreadyExistsMutex.Lock()
	defer fake.isJobAlreadyExistsMutex.Unlock()
	fake.IsJobAlreadyExistsStub = stub
}

func (fake *FakeQuery) IsJobAlreadyExistsArgsForCall(i int) (context.Context, v1alpha1.ExtendedJob, types.UID, *extendedjob.TriggerReconciler) {
	fake.isJobAlreadyExistsMutex.RLock()
	defer fake.isJobAlreadyExistsMutex.RUnlock()
	argsForCall := fake.isJobAlreadyExistsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeQuery) IsJobAlreadyExistsReturns(result1 bool, result2 error) {
	fake.isJobAlreadyExistsMutex.Lock()
	defer fake.isJobAlreadyExistsMutex.Unlock()
	fake.IsJobAlreadyExistsStub = nil
	fake.isJobAlreadyExistsReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeQuery) IsJobAlreadyExistsReturnsOnCall(i int, result1 bool, result2 error) {
	fake.isJobAlreadyExistsMutex.Lock()
	defer fake.isJobAlreadyExistsMutex.Unlock()
	fake.IsJobAlreadyExistsStub = nil
	if fake.isJobAlreadyExistsReturnsOnCall == nil {
		fake.isJobAlreadyExistsReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.isJobAlreadyExistsReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeQuery) Match(arg1 v1alpha1.ExtendedJob, arg2 v1.Pod) bool {
	fake.matchMutex.Lock()
	ret, specificReturn := fake.matchReturnsOnCall[len(fake.matchArgsForCall)]
	fake.matchArgsForCall = append(fake.matchArgsForCall, struct {
		arg1 v1alpha1.ExtendedJob
		arg2 v1.Pod
	}{arg1, arg2})
	fake.recordInvocation("Match", []interface{}{arg1, arg2})
	fake.matchMutex.Unlock()
	if fake.MatchStub != nil {
		return fake.MatchStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.matchReturns
	return fakeReturns.result1
}

func (fake *FakeQuery) MatchCallCount() int {
	fake.matchMutex.RLock()
	defer fake.matchMutex.RUnlock()
	return len(fake.matchArgsForCall)
}

func (fake *FakeQuery) MatchCalls(stub func(v1alpha1.ExtendedJob, v1.Pod) bool) {
	fake.matchMutex.Lock()
	defer fake.matchMutex.Unlock()
	fake.MatchStub = stub
}

func (fake *FakeQuery) MatchArgsForCall(i int) (v1alpha1.ExtendedJob, v1.Pod) {
	fake.matchMutex.RLock()
	defer fake.matchMutex.RUnlock()
	argsForCall := fake.matchArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeQuery) MatchReturns(result1 bool) {
	fake.matchMutex.Lock()
	defer fake.matchMutex.Unlock()
	fake.MatchStub = nil
	fake.matchReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeQuery) MatchReturnsOnCall(i int, result1 bool) {
	fake.matchMutex.Lock()
	defer fake.matchMutex.Unlock()
	fake.MatchStub = nil
	if fake.matchReturnsOnCall == nil {
		fake.matchReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.matchReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeQuery) MatchState(arg1 v1alpha1.ExtendedJob, arg2 v1alpha1.PodState) bool {
	fake.matchStateMutex.Lock()
	ret, specificReturn := fake.matchStateReturnsOnCall[len(fake.matchStateArgsForCall)]
	fake.matchStateArgsForCall = append(fake.matchStateArgsForCall, struct {
		arg1 v1alpha1.ExtendedJob
		arg2 v1alpha1.PodState
	}{arg1, arg2})
	fake.recordInvocation("MatchState", []interface{}{arg1, arg2})
	fake.matchStateMutex.Unlock()
	if fake.MatchStateStub != nil {
		return fake.MatchStateStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.matchStateReturns
	return fakeReturns.result1
}

func (fake *FakeQuery) MatchStateCallCount() int {
	fake.matchStateMutex.RLock()
	defer fake.matchStateMutex.RUnlock()
	return len(fake.matchStateArgsForCall)
}

func (fake *FakeQuery) MatchStateCalls(stub func(v1alpha1.ExtendedJob, v1alpha1.PodState) bool) {
	fake.matchStateMutex.Lock()
	defer fake.matchStateMutex.Unlock()
	fake.MatchStateStub = stub
}

func (fake *FakeQuery) MatchStateArgsForCall(i int) (v1alpha1.ExtendedJob, v1alpha1.PodState) {
	fake.matchStateMutex.RLock()
	defer fake.matchStateMutex.RUnlock()
	argsForCall := fake.matchStateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeQuery) MatchStateReturns(result1 bool) {
	fake.matchStateMutex.Lock()
	defer fake.matchStateMutex.Unlock()
	fake.MatchStateStub = nil
	fake.matchStateReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeQuery) MatchStateReturnsOnCall(i int, result1 bool) {
	fake.matchStateMutex.Lock()
	defer fake.matchStateMutex.Unlock()
	fake.MatchStateStub = nil
	if fake.matchStateReturnsOnCall == nil {
		fake.matchStateReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.matchStateReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeQuery) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.isJobAlreadyExistsMutex.RLock()
	defer fake.isJobAlreadyExistsMutex.RUnlock()
	fake.matchMutex.RLock()
	defer fake.matchMutex.RUnlock()
	fake.matchStateMutex.RLock()
	defer fake.matchStateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeQuery) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ extendedjob.Query = new(FakeQuery)
